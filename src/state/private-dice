{'RomanNumeralII': {'testfunction': {'stars': ':', 'logic': 'my result = my result + 1; (my endValue = my result) if (my result >= my limit) else my dummyValue = eval my runtestfunction'}, 'someArray': ['test'], 'emptyArray': [], 'tempArray': [], 'rmIndex': 0, 'test': {'stars': ':', 'logic': 'my value = my value + 1'}, 'addA': {'stars': ':', 'logic': 'my a = my a +1'}, 'a': 10, 'testdict': {'1': 2}, 'index': 1, 'someList': [], 'someFunction': {'stars': ':', 'logic': "my someList{my index} = 'c"}, 'f': {'stars': ':', 'logic': 'my result = my result + my value'}, 'result': 163, 'runF': 'my f -: {}', 'runner': {'stars': ':', 'logic': 'my value = num {value}; eval my runF'}, 'otherF': {'stars': ':', 'logic': 'my f -: {}'}, 'append': {'stars': ':', 'logic': "my index=0 if my appendList == [] else my index = my index + 1; my appendList = my appendList + ['{value}' + str my index]"}, 'appendList': ['test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1'], 'partF': "my f -: {'value':", 'quote': '', 'value': 10, 'someVal': 'test', 'listFunction': {'stars': ':', 'logic': 'my currentVal = eval setResult'}, 'setNewArray': 'my newArray = my newArray + [my holderArray{my rmIndex}]', 'currentVal': 'test', 'currentValue': 'my holderArray{my rmIndex}', 'remove': {'stars': ':', 'logic': "my newArray = []; my rmIndex = 0; my holderArray = {array};  my thingToRemove = '{item}'; {array} = eval runRemoveRecursive"}, 'dummyList': ['test', 'a', 'b', 'c'], 'newArray': [], 'holderArray': ['test', 'a', 'b', 'c'], 'thingToRemove': 'a', 'runtestfunction': 'my result = my result if my result >= my limit else my testfunction -: {}', 'limit': 10, 'endValue': 163, 'tester': 'my result = 2', 'testerAgain': 'eval my tester if my result > 0 else my result = 5', 'tempSkill': 19, 'tempConfirm': 11, 'stats': [10, 11, 15, 6, 7, 21], 'function': {'stars': ':', 'logic': "my tempval = ('#4d6h3'^7); '(my tempval)h6'^2;"}, 'tempval': 1, 'health': {'stars': ':', 'logic': 'my hp = {die} + #({level} - 1)d{die} + ({con} *  {level}); my hp'}, 'hp': 83, 'health_min_half': {'stars': ':', 'logic': 'my hp = {die} + #({level} - 1)d({die}//2) + (({con} + ({die}//2)) *  {level}); my hp'}, 'level': 10, 'die': 10, 'con': 2, 'counter': 'abc', 'test_append': {'stars': ':', 'logic': "my test{suffix} = 'abc';"}, 'testgood': 'abc', 'loop': {'stars': ':', 'logic': "my func = {func}; my funcs = [my function_call]; my funcs = my funcs * ({i} - 1); my funcs = my funcs + ['']; my loop_index = 0; eval my run_loop;"}, 'list_test': {'stars': ':', 'logic': 'my value = my some_list{(my index)};'}, 'some_list': [0, 1, 2, 3], 'tup': (0, 1, 2, 3), 'get': {'stars': ':', 'logic': 'my get_list = {l}; my get_index = {i}; eval my run_get'}, 'get_list': ['my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', ''], 'get_index': 0, 'run_get': 'my get_return = my get_list{my get_index}', 'get_return': 'my call_func -: {}', 'run_loop': "my iterate -: {'i': my loop_index}", 'iterate': {'stars': ':', 'logic': 'my get_list = my funcs; my get_index = {i}; eval my run_get; eval my get_return;'}, 'funcs': ['my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', 'my call_func -: {}', ''], 'loop_index': 0, 'loop_func': 'my test', 'loop_call': {'stars': ':', 'logic': 'my loop_index = my loop_index + 1; eval {func}; eval my run_loop;'}, 'run_loop_call': "my loop_call -: {'func': 'my func'}", 'run_test': 'my test -: {}', 'func': 'my test -: {}', 'tempf': 'my test -: {}', 'val': 5, 'call_func': {'stars': ':', 'logic': 'eval my run_loop_call'}, 'function_call': 'my call_func -: {}', 'temp': 'my tempval = 1', 'temps': 'my tempval = my tempval +1', 'temprun': 'eval my temp if true else eval my temps', 'testfunc': {'stars': ':', 'logic': '(eval my testf); (eval my testff);'}, 'testf': 'my testval = 1', 'testff': 'my testval = my testval + 1', 'testval': 1, 'testfff': 'my testvall = 2', 'testfuncc': {'stars': ':', 'logic': 'my testval = my testval + 1'}, 'runtest': '(my testfunc -: {}); (my testfuncc -: {});'}, 'james.murphy': {'temp': [18, 2], 'guidance': 3, 'x': 46, 'stats': [11, 8, 16, 15, 17, 5], 'five': [13, 16, 10, 15, 15], 't': (1, 2, 3)}, 'AxelStPier': {'stats': [15, 10, 16, 13, 12, 6]}, 'a-aron': {'hp': 44}, 'JackalopePie': {'hp': 44}, 'CankedTank': {'stats': [11, 13, 16, 7, 14, 11]}, 'rhodochrosite': {'stats': [12, 9, 13, 10, 12, 16]}, 'catm': {'stats': [15, 15, 10, 11, 12, 9]}, 'dicebag': {'test': 5, 'fib': 8}}