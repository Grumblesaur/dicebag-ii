{'RomanNumeralII': {'testfunction': {'stars': ':', 'logic': 'my result = my result + 1; (my endValue = my result) if (my result >= my limit) else my dummyValue = eval my runtestfunction'}, 'someArray': ['test'], 'emptyArray': [], 'tempArray': [], 'rmIndex': 0, 'test': {'stars': ':', 'logic': 'my value = my value + 1'}, 'addA': {'stars': ':', 'logic': 'my a = my a +1'}, 'a': 10, 'testdict': {'1': 2}, 'index': 'a', 'someList': [], 'someFunction': {'stars': ':', 'logic': "my someList{my index} = 'c"}, 'f': {'stars': ':', 'logic': 'my result = my result + my value'}, 'result': 163, 'runF': 'my f -: {}', 'runner': {'stars': ':', 'logic': 'my value = num {value}; eval my runF'}, 'otherF': {'stars': ':', 'logic': 'my f -: {}'}, 'append': {'stars': ':', 'logic': "my index=0 if my appendList == [] else my index = my index + 1; my appendList = my appendList + ['{value}' + str my index]"}, 'appendList': ['test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1'], 'partF': "my f -: {'value':", 'quote': '', 'value': 1, 'someVal': 'test', 'listFunction': {'stars': ':', 'logic': 'my currentVal = eval setResult'}, 'setNewArray': 'my newArray = my newArray + [my holderArray{my rmIndex}]', 'currentVal': 'test', 'currentValue': 'my holderArray{my rmIndex}', 'remove': {'stars': ':', 'logic': "my newArray = []; my rmIndex = 0; my holderArray = {array};  my thingToRemove = '{item}'; {array} = eval runRemoveRecursive"}, 'dummyList': ['test', 'a', 'b', 'c'], 'newArray': [], 'holderArray': ['test', 'a', 'b', 'c'], 'thingToRemove': 'a', 'runtestfunction': 'my result = my result if my result >= my limit else my testfunction -: {}', 'limit': 10, 'endValue': 163, 'tester': 'my result = 2', 'testerAgain': 'eval my tester if my result > 0 else my result = 5', 'tempSkill': 4, 'tempConfirm': 11, 'stats': [13, 14, 11, 15, 15, 2], 'function': {'stars': ':', 'logic': "my tempval = ('#4d6h3'^7); '(my tempval)h6'^2;"}, 'tempval': 1, 'health': {'stars': ':', 'logic': 'my hp = {die} + #({level} - 1)d{die} + ({con} *  {level}); my hp'}, 'hp': 83, 'health_min_half': {'stars': ':', 'logic': 'my hp = {die} + #({level} - 1)d({die}//2) + (({con} + ({die}//2)) *  {level}); my hp'}, 'level': 10, 'die': 10, 'con': 2, 'counter': 'abc', 'test_append': {'stars': ':', 'logic': "my test{suffix} = 'abc';"}, 'testgood': 'abc', 'loop': {'stars': ':', 'logic': "my func = {func}; my funcs = ['my run_loop_call']; my funcs = my funcs * ({i} - 1); my funcs = my funcs + ['']; my loop_index = 0; eval my run_loop;"}, 'list_test': {'stars': ':', 'logic': 'my value = my some_list{(my index)};'}, 'some_list': [0, 1, 2, 3], 'tup': (0, 1, 2, 3), 'get': {'stars': ':', 'logic': 'my get_list = {l}; my get_index = {i}; eval my run_get'}, 'get_list': ['my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', ''], 'get_index': 0, 'run_get': 'my get_return = my get_list{my get_index}', 'get_return': 'my run_loop_call', 'run_loop': "my iterate -: {'i': my loop_index}", 'iterate': {'stars': ':', 'logic': 'my get_list = my funcs; my get_index = {i}; eval my run_get; eval eval my get_return;'}, 'funcs': ['my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', 'my run_loop_call', ''], 'loop_index': 1, 'loop_func': 'my test', 'loop_call': {'stars': ':', 'logic': 'my loop_index = my loop_index + 1; eval {func}; eval my run_loop;'}, 'run_loop_call': "my loop_call -: {'func': 'my func'}", 'run_test': 'my test -: {}', 'func': 'my test -: {}', 'tempf': 'my test -: {}', 'val': 5, 'call_func': {'stars': ':', 'logic': 'eval my run_loop_call'}, 'function_call': 'my call_func -: {}', 'temp': 'my tempval = 1', 'temps': 'my tempval = my tempval +1', 'temprun': 'eval my temp if true else eval my temps', 'testfunc': {'stars': ':', 'logic': '(eval my testf); (eval my testff)'}, 'testf': 'my testval = 1', 'testff': 'my testval = my testval + 1', 'testval': 0, 'testfff': 'my testvall = 2', 'testfuncc': {'stars': ':', 'logic': 'my testval = my testval + 1'}, 'runtest': '(my testfunc -: {}); (my testfuncc -: {});', 'athletics': {'stars': ':', 'logic': 'eval my athletics_check'}, 'athletics_check': "skill -: {'mod': my str_mod + my proficiency}", 'str_mod': 2, 'proficiency': 5, 'x': 10, 'y': 'my z = 5', 'skill': {}, 'chargen': "my gen_race = sel tes_races; my gen_subrace = sel tes_subraces{my gen_race}; my gen_tesdnd_race = (my gen_subrace if my gen_subrace in tesdnd_subraces{my gen_race} else sel tesdnd_subraces{my gen_race}); my gen_name_types = sel name_types{my gen_subrace}; my gen_gender = (sel ['M','F', 'N'] if my gen_race == 'Argonian' else sel ['M','F']); my gen_age = 10 + 4d4l3 + 5d6l2 + 2d30l1; my gen_name = name {'race':my gen_race, 'subrace':my gen_subrace, 'gender':my gen_gender, 'types': my gen_name_types}; my stats = []; my stats = my stats + [4d6h3]; my stats = my stats + [4d6h3]; my stats = my stats + [4d6h3]; my stats = my stats + [4d6h3]; my stats = my stats + [4d6h3]; my stats = my stats + [(70 - #my stats)]; my gen_sorted_stats = sort my stats; my gen_top_stat = my gen_sorted_stats{5}; my gen_second_stat = my gen_sorted_stats{4}; my gen_other_stats = [my gen_sorted_stats{0}] + [my gen_sorted_stats{1}] + [my gen_sorted_stats{2}] + [my gen_sorted_stats{3}]; my gen_other_stats = shuffle my gen_other_stats; my gen_class = sel dnd_classes; my gen_top_two = sel dnd_class_scores{my gen_class}; my dnd_scores = ['CHA', 'CON', 'DEX', 'INT', 'STR', 'WIS']; my dnd_scores{dnd_score_order{my gen_top_two{0}}} = '_DEL'; my dnd_scores{dnd_score_order{my gen_top_two{1}}} = '_DEL'; my dnd_scores = sort my dnd_scores; del my dnd_scores{4}; del my dnd_scores{4}; my gen_scores = {my gen_top_two{0}: my gen_top_stat, my gen_top_two{1}: my gen_second_stat, my dnd_scores{0}: my gen_other_stats{0}, my dnd_scores{1}: my gen_other_stats{1}, my dnd_scores{2}: my gen_other_stats{2}, my dnd_scores{3}: my gen_other_stats{3}}; my gen_character = {'name':my gen_name, 'race':my gen_race, 'subrace':my gen_tesdnd_race, 'age':my gen_age, 'gender':my gen_gender, 'class':my gen_class, 'stats':my gen_scores}", 'gen_race': 'Nord', 'gen_subrace': 'Nord', 'gen_gender': 'M', 'gen_age': 32, 'gen_name': 'Brofnyr', 'gen_character': {'name': 'Brofnyr', 'race': 'Nord', 'subrace': 'Nord', 'age': 32, 'gender': 'M', 'class': 'Fighter', 'stats': {'STR': 15, 'CON': 15, 'CHA': 2, 'DEX': 13, 'INT': 11, 'WIS': 14}}, 'gen_tesdnd_race': 'Nord', 'gen_name_types': ['prefix', 'first'], 'gen_class': 'Fighter', 'z': [1, 3, 4], 'q': {'stars': ':', 'logic': 'my z = 10'}, 'substats': [7, 10, 11, 12], 'gen_sorted_stats': [2, 11, 13, 14, 15, 15], 'gen_top_stat': 15, 'gen_second_stat': 15, 'gen_other_stats': [2, 13, 11, 14], 'gen_top_two': ['STR', 'CON'], 'dnd_scores': ['CHA', 'DEX', 'INT', 'WIS'], 'gen_scores': {'STR': 15, 'CON': 15, 'CHA': 2, 'DEX': 13, 'INT': 11, 'WIS': 14}}, 'james.murphy': {'temp': [18, 2], 'guidance': 3, 'x': 46, 'stats': [13, 10, 14, 13, 18, 2], 'five': [13, 16, 10, 15, 15], 't': (1, 2, 3), 'testfunc': {'stars': ':', 'logic': '(eval my testf); (eval my testff)'}, 'gen_race': 'Argonian', 'gen_subrace': 'Jel', 'gen_tesdnd_race': 'Argonian', 'gen_name_types': ['first'], 'gen_gender': 'F', 'gen_age': 34, 'gen_name': 'Am-Radzila', 'gen_sorted_stats': [2, 10, 13, 13, 14, 18], 'gen_top_stat': 18, 'gen_second_stat': 14, 'gen_other_stats': [13, 10, 13, 2], 'gen_class': 'Bard', 'gen_top_two': ['CHA', 'DEX'], 'dnd_scores': ['CON', 'INT', 'STR', 'WIS'], 'gen_scores': {'CHA': 18, 'DEX': 14, 'CON': 13, 'INT': 10, 'STR': 13, 'WIS': 2}, 'gen_character': {'name': 'Am-Radzila', 'race': 'Argonian', 'subrace': 'Argonian', 'age': 34, 'gender': 'F', 'class': 'Bard', 'stats': {'CHA': 18, 'DEX': 14, 'CON': 13, 'INT': 10, 'STR': 13, 'WIS': 2}}}, 'AxelStPier': {'stats': [15, 10, 16, 13, 12, 6], 'tempSkill': 18, 'tempConfirm': 19}, 'a-aron': {'hp': 44}, 'JackalopePie': {'hp': 44}, 'CankedTank': {'stats': [11, 13, 16, 7, 14, 11]}, 'rhodochrosite': {'stats': [12, 9, 13, 10, 12, 16]}, 'catm': {'stats': [15, 15, 10, 11, 12, 9]}, 'dicebag': {'test': 5, 'fib': 8}}