{'RomanNumeralII': {'testfunction': {'stars': ':', 'logic': 'my result = my result + 1; (my endValue = my result) if (my result >= my limit) else my dummyValue = eval my runtestfunction'}, 'someArray': ['test'], 'emptyArray': [], 'tempArray': [], 'rmIndex': 0, 'test': '&#123;', 'addA': {'stars': ':', 'logic': 'my a = my a +1'}, 'a': 10, 'testdict': {'1': 2}, 'index': 0, 'someList': [], 'someFunction': {'stars': ':', 'logic': "my someList{my index} = 'c"}, 'f': {'stars': ':', 'logic': 'my result = my result + my value'}, 'result': 163, 'runF': 'my f -: {}', 'runner': {'stars': ':', 'logic': 'my value = num {value}; eval my runF'}, 'otherF': {'stars': ':', 'logic': 'my f -: {}'}, 'append': {'stars': ':', 'logic': "my index=0 if my appendList == [] else my index = my index + 1; my appendList = my appendList + ['{value}' + str my index]"}, 'appendList': ['test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1', 'test1'], 'partF': "my f -: {'value':", 'quote': '', 'value': 2, 'someVal': 'test', 'listFunction': {'stars': ':', 'logic': 'my currentVal = eval setResult'}, 'setNewArray': 'my newArray = my newArray + [my holderArray{my rmIndex}]', 'currentVal': 'test', 'currentValue': 'my holderArray{my rmIndex}', 'remove': {'stars': ':', 'logic': "my newArray = []; my rmIndex = 0; my holderArray = {array};  my thingToRemove = '{item}'; {array} = eval runRemoveRecursive"}, 'dummyList': ['test', 'a', 'b', 'c'], 'newArray': [], 'holderArray': ['test', 'a', 'b', 'c'], 'thingToRemove': 'a', 'runtestfunction': 'my result = my result if my result >= my limit else my testfunction -: {}', 'limit': 10, 'endValue': 163, 'tester': 'my result = 2', 'testerAgain': 'eval my tester if my result > 0 else my result = 5'}}