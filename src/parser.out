Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> expr CAT expr
Rule 2     expr -> expr ADD expr
Rule 3     expr -> expr SUB expr
Rule 4     expr -> expr MUL expr
Rule 5     expr -> expr DIV expr
Rule 6     expr -> expr MOD expr
Rule 7     expr -> expr FDIV expr
Rule 8     expr -> expr LOG expr
Rule 9     expr -> expr EXP expr
Rule 10    expr -> expr DIE expr
Rule 11    expr -> MACRO REP expr
Rule 12    expr -> SUM expr
Rule 13    expr -> AVG expr
Rule 14    expr -> SAMM expr
Rule 15    expr -> expr LOW expr
Rule 16    expr -> expr HIGH expr
Rule 17    expr -> LPAR expr RPAR
Rule 18    expr -> NUMBER
Rule 19    expr -> var
Rule 20    var -> LAST
Rule 21    expr -> LBRK elements RBRK
Rule 22    elements -> elements COM expr
Rule 23    elements -> expr

Terminals, with rules where they appear

ADD                  : 2
AVG                  : 13
CAT                  : 1
COM                  : 22
DIE                  : 10
DIV                  : 5
EXP                  : 9
FDIV                 : 7
HIGH                 : 16
LAST                 : 20
LBRK                 : 21
LOG                  : 8
LOW                  : 15
LPAR                 : 17
MACRO                : 11
MOD                  : 6
MUL                  : 4
NUMBER               : 18
RBRK                 : 21
REP                  : 11
RPAR                 : 17
SAMM                 : 14
SUB                  : 3
SUM                  : 12
error                : 

Nonterminals, with rules where they appear

elements             : 21 22
expr                 : 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 12 13 14 15 15 16 16 17 22 23 0
var                  : 19

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 1
    var                            shift and go to state 8

state 1

    (0) S' -> expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             shift and go to state 11
    ADD             shift and go to state 12
    SUB             shift and go to state 13
    MUL             shift and go to state 14
    DIV             shift and go to state 15
    MOD             shift and go to state 16
    FDIV            shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22


state 2

    (11) expr -> MACRO . REP expr

    REP             shift and go to state 23


state 3

    (12) expr -> SUM . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 24
    var                            shift and go to state 8

state 4

    (13) expr -> AVG . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 25
    var                            shift and go to state 8

state 5

    (14) expr -> SAMM . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 26
    var                            shift and go to state 8

state 6

    (17) expr -> LPAR . expr RPAR
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 27
    var                            shift and go to state 8

state 7

    (18) expr -> NUMBER .

    CAT             reduce using rule 18 (expr -> NUMBER .)
    ADD             reduce using rule 18 (expr -> NUMBER .)
    SUB             reduce using rule 18 (expr -> NUMBER .)
    MUL             reduce using rule 18 (expr -> NUMBER .)
    DIV             reduce using rule 18 (expr -> NUMBER .)
    MOD             reduce using rule 18 (expr -> NUMBER .)
    FDIV            reduce using rule 18 (expr -> NUMBER .)
    LOG             reduce using rule 18 (expr -> NUMBER .)
    EXP             reduce using rule 18 (expr -> NUMBER .)
    DIE             reduce using rule 18 (expr -> NUMBER .)
    LOW             reduce using rule 18 (expr -> NUMBER .)
    HIGH            reduce using rule 18 (expr -> NUMBER .)
    $end            reduce using rule 18 (expr -> NUMBER .)
    RPAR            reduce using rule 18 (expr -> NUMBER .)
    RBRK            reduce using rule 18 (expr -> NUMBER .)
    COM             reduce using rule 18 (expr -> NUMBER .)


state 8

    (19) expr -> var .

    CAT             reduce using rule 19 (expr -> var .)
    ADD             reduce using rule 19 (expr -> var .)
    SUB             reduce using rule 19 (expr -> var .)
    MUL             reduce using rule 19 (expr -> var .)
    DIV             reduce using rule 19 (expr -> var .)
    MOD             reduce using rule 19 (expr -> var .)
    FDIV            reduce using rule 19 (expr -> var .)
    LOG             reduce using rule 19 (expr -> var .)
    EXP             reduce using rule 19 (expr -> var .)
    DIE             reduce using rule 19 (expr -> var .)
    LOW             reduce using rule 19 (expr -> var .)
    HIGH            reduce using rule 19 (expr -> var .)
    $end            reduce using rule 19 (expr -> var .)
    RPAR            reduce using rule 19 (expr -> var .)
    RBRK            reduce using rule 19 (expr -> var .)
    COM             reduce using rule 19 (expr -> var .)


state 9

    (21) expr -> LBRK . elements RBRK
    (22) elements -> . elements COM expr
    (23) elements -> . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    elements                       shift and go to state 28
    expr                           shift and go to state 29
    var                            shift and go to state 8

state 10

    (20) var -> LAST .

    CAT             reduce using rule 20 (var -> LAST .)
    ADD             reduce using rule 20 (var -> LAST .)
    SUB             reduce using rule 20 (var -> LAST .)
    MUL             reduce using rule 20 (var -> LAST .)
    DIV             reduce using rule 20 (var -> LAST .)
    MOD             reduce using rule 20 (var -> LAST .)
    FDIV            reduce using rule 20 (var -> LAST .)
    LOG             reduce using rule 20 (var -> LAST .)
    EXP             reduce using rule 20 (var -> LAST .)
    DIE             reduce using rule 20 (var -> LAST .)
    LOW             reduce using rule 20 (var -> LAST .)
    HIGH            reduce using rule 20 (var -> LAST .)
    $end            reduce using rule 20 (var -> LAST .)
    RPAR            reduce using rule 20 (var -> LAST .)
    RBRK            reduce using rule 20 (var -> LAST .)
    COM             reduce using rule 20 (var -> LAST .)


state 11

    (1) expr -> expr CAT . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 30
    var                            shift and go to state 8

state 12

    (2) expr -> expr ADD . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 31
    var                            shift and go to state 8

state 13

    (3) expr -> expr SUB . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 32
    var                            shift and go to state 8

state 14

    (4) expr -> expr MUL . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 33
    var                            shift and go to state 8

state 15

    (5) expr -> expr DIV . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 34
    var                            shift and go to state 8

state 16

    (6) expr -> expr MOD . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 35
    var                            shift and go to state 8

state 17

    (7) expr -> expr FDIV . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 36
    var                            shift and go to state 8

state 18

    (8) expr -> expr LOG . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 37
    var                            shift and go to state 8

state 19

    (9) expr -> expr EXP . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 38
    var                            shift and go to state 8

state 20

    (10) expr -> expr DIE . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 39
    var                            shift and go to state 8

state 21

    (15) expr -> expr LOW . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 40
    var                            shift and go to state 8

state 22

    (16) expr -> expr HIGH . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 41
    var                            shift and go to state 8

state 23

    (11) expr -> MACRO REP . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 42
    var                            shift and go to state 8

state 24

    (12) expr -> SUM expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 12 (expr -> SUM expr .)
    ADD             reduce using rule 12 (expr -> SUM expr .)
    SUB             reduce using rule 12 (expr -> SUM expr .)
    MUL             reduce using rule 12 (expr -> SUM expr .)
    DIV             reduce using rule 12 (expr -> SUM expr .)
    MOD             reduce using rule 12 (expr -> SUM expr .)
    FDIV            reduce using rule 12 (expr -> SUM expr .)
    LOG             reduce using rule 12 (expr -> SUM expr .)
    EXP             reduce using rule 12 (expr -> SUM expr .)
    $end            reduce using rule 12 (expr -> SUM expr .)
    RPAR            reduce using rule 12 (expr -> SUM expr .)
    RBRK            reduce using rule 12 (expr -> SUM expr .)
    COM             reduce using rule 12 (expr -> SUM expr .)
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! DIE             [ reduce using rule 12 (expr -> SUM expr .) ]
  ! LOW             [ reduce using rule 12 (expr -> SUM expr .) ]
  ! HIGH            [ reduce using rule 12 (expr -> SUM expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]
  ! LOG             [ shift and go to state 18 ]
  ! EXP             [ shift and go to state 19 ]


state 25

    (13) expr -> AVG expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 13 (expr -> AVG expr .)
    ADD             reduce using rule 13 (expr -> AVG expr .)
    SUB             reduce using rule 13 (expr -> AVG expr .)
    MUL             reduce using rule 13 (expr -> AVG expr .)
    DIV             reduce using rule 13 (expr -> AVG expr .)
    MOD             reduce using rule 13 (expr -> AVG expr .)
    FDIV            reduce using rule 13 (expr -> AVG expr .)
    LOG             reduce using rule 13 (expr -> AVG expr .)
    EXP             reduce using rule 13 (expr -> AVG expr .)
    $end            reduce using rule 13 (expr -> AVG expr .)
    RPAR            reduce using rule 13 (expr -> AVG expr .)
    RBRK            reduce using rule 13 (expr -> AVG expr .)
    COM             reduce using rule 13 (expr -> AVG expr .)
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! DIE             [ reduce using rule 13 (expr -> AVG expr .) ]
  ! LOW             [ reduce using rule 13 (expr -> AVG expr .) ]
  ! HIGH            [ reduce using rule 13 (expr -> AVG expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]
  ! LOG             [ shift and go to state 18 ]
  ! EXP             [ shift and go to state 19 ]


state 26

    (14) expr -> SAMM expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 14 (expr -> SAMM expr .)
    ADD             reduce using rule 14 (expr -> SAMM expr .)
    SUB             reduce using rule 14 (expr -> SAMM expr .)
    MUL             reduce using rule 14 (expr -> SAMM expr .)
    DIV             reduce using rule 14 (expr -> SAMM expr .)
    MOD             reduce using rule 14 (expr -> SAMM expr .)
    FDIV            reduce using rule 14 (expr -> SAMM expr .)
    LOG             reduce using rule 14 (expr -> SAMM expr .)
    EXP             reduce using rule 14 (expr -> SAMM expr .)
    $end            reduce using rule 14 (expr -> SAMM expr .)
    RPAR            reduce using rule 14 (expr -> SAMM expr .)
    RBRK            reduce using rule 14 (expr -> SAMM expr .)
    COM             reduce using rule 14 (expr -> SAMM expr .)
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! DIE             [ reduce using rule 14 (expr -> SAMM expr .) ]
  ! LOW             [ reduce using rule 14 (expr -> SAMM expr .) ]
  ! HIGH            [ reduce using rule 14 (expr -> SAMM expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]
  ! LOG             [ shift and go to state 18 ]
  ! EXP             [ shift and go to state 19 ]


state 27

    (17) expr -> LPAR expr . RPAR
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    RPAR            shift and go to state 43
    CAT             shift and go to state 11
    ADD             shift and go to state 12
    SUB             shift and go to state 13
    MUL             shift and go to state 14
    DIV             shift and go to state 15
    MOD             shift and go to state 16
    FDIV            shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22


state 28

    (21) expr -> LBRK elements . RBRK
    (22) elements -> elements . COM expr

    RBRK            shift and go to state 44
    COM             shift and go to state 45


state 29

    (23) elements -> expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    RBRK            reduce using rule 23 (elements -> expr .)
    COM             reduce using rule 23 (elements -> expr .)
    CAT             shift and go to state 11
    ADD             shift and go to state 12
    SUB             shift and go to state 13
    MUL             shift and go to state 14
    DIV             shift and go to state 15
    MOD             shift and go to state 16
    FDIV            shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22


state 30

    (1) expr -> expr CAT expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 1 (expr -> expr CAT expr .)
    $end            reduce using rule 1 (expr -> expr CAT expr .)
    RPAR            reduce using rule 1 (expr -> expr CAT expr .)
    RBRK            reduce using rule 1 (expr -> expr CAT expr .)
    COM             reduce using rule 1 (expr -> expr CAT expr .)
    ADD             shift and go to state 12
    SUB             shift and go to state 13
    MUL             shift and go to state 14
    DIV             shift and go to state 15
    MOD             shift and go to state 16
    FDIV            shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! ADD             [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! SUB             [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! MUL             [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! DIV             [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! MOD             [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! FDIV            [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! LOG             [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! EXP             [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! DIE             [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! LOW             [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! HIGH            [ reduce using rule 1 (expr -> expr CAT expr .) ]
  ! CAT             [ shift and go to state 11 ]


state 31

    (2) expr -> expr ADD expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 2 (expr -> expr ADD expr .)
    ADD             reduce using rule 2 (expr -> expr ADD expr .)
    SUB             reduce using rule 2 (expr -> expr ADD expr .)
    $end            reduce using rule 2 (expr -> expr ADD expr .)
    RPAR            reduce using rule 2 (expr -> expr ADD expr .)
    RBRK            reduce using rule 2 (expr -> expr ADD expr .)
    COM             reduce using rule 2 (expr -> expr ADD expr .)
    MUL             shift and go to state 14
    DIV             shift and go to state 15
    MOD             shift and go to state 16
    FDIV            shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! MUL             [ reduce using rule 2 (expr -> expr ADD expr .) ]
  ! DIV             [ reduce using rule 2 (expr -> expr ADD expr .) ]
  ! MOD             [ reduce using rule 2 (expr -> expr ADD expr .) ]
  ! FDIV            [ reduce using rule 2 (expr -> expr ADD expr .) ]
  ! LOG             [ reduce using rule 2 (expr -> expr ADD expr .) ]
  ! EXP             [ reduce using rule 2 (expr -> expr ADD expr .) ]
  ! DIE             [ reduce using rule 2 (expr -> expr ADD expr .) ]
  ! LOW             [ reduce using rule 2 (expr -> expr ADD expr .) ]
  ! HIGH            [ reduce using rule 2 (expr -> expr ADD expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]


state 32

    (3) expr -> expr SUB expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 3 (expr -> expr SUB expr .)
    ADD             reduce using rule 3 (expr -> expr SUB expr .)
    SUB             reduce using rule 3 (expr -> expr SUB expr .)
    $end            reduce using rule 3 (expr -> expr SUB expr .)
    RPAR            reduce using rule 3 (expr -> expr SUB expr .)
    RBRK            reduce using rule 3 (expr -> expr SUB expr .)
    COM             reduce using rule 3 (expr -> expr SUB expr .)
    MUL             shift and go to state 14
    DIV             shift and go to state 15
    MOD             shift and go to state 16
    FDIV            shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! MUL             [ reduce using rule 3 (expr -> expr SUB expr .) ]
  ! DIV             [ reduce using rule 3 (expr -> expr SUB expr .) ]
  ! MOD             [ reduce using rule 3 (expr -> expr SUB expr .) ]
  ! FDIV            [ reduce using rule 3 (expr -> expr SUB expr .) ]
  ! LOG             [ reduce using rule 3 (expr -> expr SUB expr .) ]
  ! EXP             [ reduce using rule 3 (expr -> expr SUB expr .) ]
  ! DIE             [ reduce using rule 3 (expr -> expr SUB expr .) ]
  ! LOW             [ reduce using rule 3 (expr -> expr SUB expr .) ]
  ! HIGH            [ reduce using rule 3 (expr -> expr SUB expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]


state 33

    (4) expr -> expr MUL expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 4 (expr -> expr MUL expr .)
    ADD             reduce using rule 4 (expr -> expr MUL expr .)
    SUB             reduce using rule 4 (expr -> expr MUL expr .)
    MUL             reduce using rule 4 (expr -> expr MUL expr .)
    DIV             reduce using rule 4 (expr -> expr MUL expr .)
    MOD             reduce using rule 4 (expr -> expr MUL expr .)
    FDIV            reduce using rule 4 (expr -> expr MUL expr .)
    $end            reduce using rule 4 (expr -> expr MUL expr .)
    RPAR            reduce using rule 4 (expr -> expr MUL expr .)
    RBRK            reduce using rule 4 (expr -> expr MUL expr .)
    COM             reduce using rule 4 (expr -> expr MUL expr .)
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! LOG             [ reduce using rule 4 (expr -> expr MUL expr .) ]
  ! EXP             [ reduce using rule 4 (expr -> expr MUL expr .) ]
  ! DIE             [ reduce using rule 4 (expr -> expr MUL expr .) ]
  ! LOW             [ reduce using rule 4 (expr -> expr MUL expr .) ]
  ! HIGH            [ reduce using rule 4 (expr -> expr MUL expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]


state 34

    (5) expr -> expr DIV expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 5 (expr -> expr DIV expr .)
    ADD             reduce using rule 5 (expr -> expr DIV expr .)
    SUB             reduce using rule 5 (expr -> expr DIV expr .)
    MUL             reduce using rule 5 (expr -> expr DIV expr .)
    DIV             reduce using rule 5 (expr -> expr DIV expr .)
    MOD             reduce using rule 5 (expr -> expr DIV expr .)
    FDIV            reduce using rule 5 (expr -> expr DIV expr .)
    $end            reduce using rule 5 (expr -> expr DIV expr .)
    RPAR            reduce using rule 5 (expr -> expr DIV expr .)
    RBRK            reduce using rule 5 (expr -> expr DIV expr .)
    COM             reduce using rule 5 (expr -> expr DIV expr .)
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! LOG             [ reduce using rule 5 (expr -> expr DIV expr .) ]
  ! EXP             [ reduce using rule 5 (expr -> expr DIV expr .) ]
  ! DIE             [ reduce using rule 5 (expr -> expr DIV expr .) ]
  ! LOW             [ reduce using rule 5 (expr -> expr DIV expr .) ]
  ! HIGH            [ reduce using rule 5 (expr -> expr DIV expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]


state 35

    (6) expr -> expr MOD expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 6 (expr -> expr MOD expr .)
    ADD             reduce using rule 6 (expr -> expr MOD expr .)
    SUB             reduce using rule 6 (expr -> expr MOD expr .)
    MUL             reduce using rule 6 (expr -> expr MOD expr .)
    DIV             reduce using rule 6 (expr -> expr MOD expr .)
    MOD             reduce using rule 6 (expr -> expr MOD expr .)
    FDIV            reduce using rule 6 (expr -> expr MOD expr .)
    $end            reduce using rule 6 (expr -> expr MOD expr .)
    RPAR            reduce using rule 6 (expr -> expr MOD expr .)
    RBRK            reduce using rule 6 (expr -> expr MOD expr .)
    COM             reduce using rule 6 (expr -> expr MOD expr .)
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! LOG             [ reduce using rule 6 (expr -> expr MOD expr .) ]
  ! EXP             [ reduce using rule 6 (expr -> expr MOD expr .) ]
  ! DIE             [ reduce using rule 6 (expr -> expr MOD expr .) ]
  ! LOW             [ reduce using rule 6 (expr -> expr MOD expr .) ]
  ! HIGH            [ reduce using rule 6 (expr -> expr MOD expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]


state 36

    (7) expr -> expr FDIV expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 7 (expr -> expr FDIV expr .)
    ADD             reduce using rule 7 (expr -> expr FDIV expr .)
    SUB             reduce using rule 7 (expr -> expr FDIV expr .)
    MUL             reduce using rule 7 (expr -> expr FDIV expr .)
    DIV             reduce using rule 7 (expr -> expr FDIV expr .)
    MOD             reduce using rule 7 (expr -> expr FDIV expr .)
    FDIV            reduce using rule 7 (expr -> expr FDIV expr .)
    $end            reduce using rule 7 (expr -> expr FDIV expr .)
    RPAR            reduce using rule 7 (expr -> expr FDIV expr .)
    RBRK            reduce using rule 7 (expr -> expr FDIV expr .)
    COM             reduce using rule 7 (expr -> expr FDIV expr .)
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! LOG             [ reduce using rule 7 (expr -> expr FDIV expr .) ]
  ! EXP             [ reduce using rule 7 (expr -> expr FDIV expr .) ]
  ! DIE             [ reduce using rule 7 (expr -> expr FDIV expr .) ]
  ! LOW             [ reduce using rule 7 (expr -> expr FDIV expr .) ]
  ! HIGH            [ reduce using rule 7 (expr -> expr FDIV expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]


state 37

    (8) expr -> expr LOG expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 8 (expr -> expr LOG expr .)
    ADD             reduce using rule 8 (expr -> expr LOG expr .)
    SUB             reduce using rule 8 (expr -> expr LOG expr .)
    MUL             reduce using rule 8 (expr -> expr LOG expr .)
    DIV             reduce using rule 8 (expr -> expr LOG expr .)
    MOD             reduce using rule 8 (expr -> expr LOG expr .)
    FDIV            reduce using rule 8 (expr -> expr LOG expr .)
    LOG             reduce using rule 8 (expr -> expr LOG expr .)
    $end            reduce using rule 8 (expr -> expr LOG expr .)
    RPAR            reduce using rule 8 (expr -> expr LOG expr .)
    RBRK            reduce using rule 8 (expr -> expr LOG expr .)
    COM             reduce using rule 8 (expr -> expr LOG expr .)
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! EXP             [ reduce using rule 8 (expr -> expr LOG expr .) ]
  ! DIE             [ reduce using rule 8 (expr -> expr LOG expr .) ]
  ! LOW             [ reduce using rule 8 (expr -> expr LOG expr .) ]
  ! HIGH            [ reduce using rule 8 (expr -> expr LOG expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]
  ! LOG             [ shift and go to state 18 ]


state 38

    (9) expr -> expr EXP expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 9 (expr -> expr EXP expr .)
    ADD             reduce using rule 9 (expr -> expr EXP expr .)
    SUB             reduce using rule 9 (expr -> expr EXP expr .)
    MUL             reduce using rule 9 (expr -> expr EXP expr .)
    DIV             reduce using rule 9 (expr -> expr EXP expr .)
    MOD             reduce using rule 9 (expr -> expr EXP expr .)
    FDIV            reduce using rule 9 (expr -> expr EXP expr .)
    LOG             reduce using rule 9 (expr -> expr EXP expr .)
    $end            reduce using rule 9 (expr -> expr EXP expr .)
    RPAR            reduce using rule 9 (expr -> expr EXP expr .)
    RBRK            reduce using rule 9 (expr -> expr EXP expr .)
    COM             reduce using rule 9 (expr -> expr EXP expr .)
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! EXP             [ reduce using rule 9 (expr -> expr EXP expr .) ]
  ! DIE             [ reduce using rule 9 (expr -> expr EXP expr .) ]
  ! LOW             [ reduce using rule 9 (expr -> expr EXP expr .) ]
  ! HIGH            [ reduce using rule 9 (expr -> expr EXP expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]
  ! LOG             [ shift and go to state 18 ]


state 39

    (10) expr -> expr DIE expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 10 (expr -> expr DIE expr .)
    ADD             reduce using rule 10 (expr -> expr DIE expr .)
    SUB             reduce using rule 10 (expr -> expr DIE expr .)
    MUL             reduce using rule 10 (expr -> expr DIE expr .)
    DIV             reduce using rule 10 (expr -> expr DIE expr .)
    MOD             reduce using rule 10 (expr -> expr DIE expr .)
    FDIV            reduce using rule 10 (expr -> expr DIE expr .)
    LOG             reduce using rule 10 (expr -> expr DIE expr .)
    EXP             reduce using rule 10 (expr -> expr DIE expr .)
    DIE             reduce using rule 10 (expr -> expr DIE expr .)
    LOW             reduce using rule 10 (expr -> expr DIE expr .)
    HIGH            reduce using rule 10 (expr -> expr DIE expr .)
    $end            reduce using rule 10 (expr -> expr DIE expr .)
    RPAR            reduce using rule 10 (expr -> expr DIE expr .)
    RBRK            reduce using rule 10 (expr -> expr DIE expr .)
    COM             reduce using rule 10 (expr -> expr DIE expr .)

  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]
  ! LOG             [ shift and go to state 18 ]
  ! EXP             [ shift and go to state 19 ]
  ! DIE             [ shift and go to state 20 ]
  ! LOW             [ shift and go to state 21 ]
  ! HIGH            [ shift and go to state 22 ]


state 40

    (15) expr -> expr LOW expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 15 (expr -> expr LOW expr .)
    ADD             reduce using rule 15 (expr -> expr LOW expr .)
    SUB             reduce using rule 15 (expr -> expr LOW expr .)
    MUL             reduce using rule 15 (expr -> expr LOW expr .)
    DIV             reduce using rule 15 (expr -> expr LOW expr .)
    MOD             reduce using rule 15 (expr -> expr LOW expr .)
    FDIV            reduce using rule 15 (expr -> expr LOW expr .)
    LOG             reduce using rule 15 (expr -> expr LOW expr .)
    EXP             reduce using rule 15 (expr -> expr LOW expr .)
    $end            reduce using rule 15 (expr -> expr LOW expr .)
    RPAR            reduce using rule 15 (expr -> expr LOW expr .)
    RBRK            reduce using rule 15 (expr -> expr LOW expr .)
    COM             reduce using rule 15 (expr -> expr LOW expr .)
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! DIE             [ reduce using rule 15 (expr -> expr LOW expr .) ]
  ! LOW             [ reduce using rule 15 (expr -> expr LOW expr .) ]
  ! HIGH            [ reduce using rule 15 (expr -> expr LOW expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]
  ! LOG             [ shift and go to state 18 ]
  ! EXP             [ shift and go to state 19 ]


state 41

    (16) expr -> expr HIGH expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 16 (expr -> expr HIGH expr .)
    ADD             reduce using rule 16 (expr -> expr HIGH expr .)
    SUB             reduce using rule 16 (expr -> expr HIGH expr .)
    MUL             reduce using rule 16 (expr -> expr HIGH expr .)
    DIV             reduce using rule 16 (expr -> expr HIGH expr .)
    MOD             reduce using rule 16 (expr -> expr HIGH expr .)
    FDIV            reduce using rule 16 (expr -> expr HIGH expr .)
    LOG             reduce using rule 16 (expr -> expr HIGH expr .)
    EXP             reduce using rule 16 (expr -> expr HIGH expr .)
    $end            reduce using rule 16 (expr -> expr HIGH expr .)
    RPAR            reduce using rule 16 (expr -> expr HIGH expr .)
    RBRK            reduce using rule 16 (expr -> expr HIGH expr .)
    COM             reduce using rule 16 (expr -> expr HIGH expr .)
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

  ! DIE             [ reduce using rule 16 (expr -> expr HIGH expr .) ]
  ! LOW             [ reduce using rule 16 (expr -> expr HIGH expr .) ]
  ! HIGH            [ reduce using rule 16 (expr -> expr HIGH expr .) ]
  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]
  ! LOG             [ shift and go to state 18 ]
  ! EXP             [ shift and go to state 19 ]


state 42

    (11) expr -> MACRO REP expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    CAT             reduce using rule 11 (expr -> MACRO REP expr .)
    ADD             reduce using rule 11 (expr -> MACRO REP expr .)
    SUB             reduce using rule 11 (expr -> MACRO REP expr .)
    MUL             reduce using rule 11 (expr -> MACRO REP expr .)
    DIV             reduce using rule 11 (expr -> MACRO REP expr .)
    MOD             reduce using rule 11 (expr -> MACRO REP expr .)
    FDIV            reduce using rule 11 (expr -> MACRO REP expr .)
    LOG             reduce using rule 11 (expr -> MACRO REP expr .)
    EXP             reduce using rule 11 (expr -> MACRO REP expr .)
    DIE             reduce using rule 11 (expr -> MACRO REP expr .)
    LOW             reduce using rule 11 (expr -> MACRO REP expr .)
    HIGH            reduce using rule 11 (expr -> MACRO REP expr .)
    $end            reduce using rule 11 (expr -> MACRO REP expr .)
    RPAR            reduce using rule 11 (expr -> MACRO REP expr .)
    RBRK            reduce using rule 11 (expr -> MACRO REP expr .)
    COM             reduce using rule 11 (expr -> MACRO REP expr .)

  ! CAT             [ shift and go to state 11 ]
  ! ADD             [ shift and go to state 12 ]
  ! SUB             [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! MOD             [ shift and go to state 16 ]
  ! FDIV            [ shift and go to state 17 ]
  ! LOG             [ shift and go to state 18 ]
  ! EXP             [ shift and go to state 19 ]
  ! DIE             [ shift and go to state 20 ]
  ! LOW             [ shift and go to state 21 ]
  ! HIGH            [ shift and go to state 22 ]


state 43

    (17) expr -> LPAR expr RPAR .

    CAT             reduce using rule 17 (expr -> LPAR expr RPAR .)
    ADD             reduce using rule 17 (expr -> LPAR expr RPAR .)
    SUB             reduce using rule 17 (expr -> LPAR expr RPAR .)
    MUL             reduce using rule 17 (expr -> LPAR expr RPAR .)
    DIV             reduce using rule 17 (expr -> LPAR expr RPAR .)
    MOD             reduce using rule 17 (expr -> LPAR expr RPAR .)
    FDIV            reduce using rule 17 (expr -> LPAR expr RPAR .)
    LOG             reduce using rule 17 (expr -> LPAR expr RPAR .)
    EXP             reduce using rule 17 (expr -> LPAR expr RPAR .)
    DIE             reduce using rule 17 (expr -> LPAR expr RPAR .)
    LOW             reduce using rule 17 (expr -> LPAR expr RPAR .)
    HIGH            reduce using rule 17 (expr -> LPAR expr RPAR .)
    $end            reduce using rule 17 (expr -> LPAR expr RPAR .)
    RPAR            reduce using rule 17 (expr -> LPAR expr RPAR .)
    RBRK            reduce using rule 17 (expr -> LPAR expr RPAR .)
    COM             reduce using rule 17 (expr -> LPAR expr RPAR .)


state 44

    (21) expr -> LBRK elements RBRK .

    CAT             reduce using rule 21 (expr -> LBRK elements RBRK .)
    ADD             reduce using rule 21 (expr -> LBRK elements RBRK .)
    SUB             reduce using rule 21 (expr -> LBRK elements RBRK .)
    MUL             reduce using rule 21 (expr -> LBRK elements RBRK .)
    DIV             reduce using rule 21 (expr -> LBRK elements RBRK .)
    MOD             reduce using rule 21 (expr -> LBRK elements RBRK .)
    FDIV            reduce using rule 21 (expr -> LBRK elements RBRK .)
    LOG             reduce using rule 21 (expr -> LBRK elements RBRK .)
    EXP             reduce using rule 21 (expr -> LBRK elements RBRK .)
    DIE             reduce using rule 21 (expr -> LBRK elements RBRK .)
    LOW             reduce using rule 21 (expr -> LBRK elements RBRK .)
    HIGH            reduce using rule 21 (expr -> LBRK elements RBRK .)
    $end            reduce using rule 21 (expr -> LBRK elements RBRK .)
    RPAR            reduce using rule 21 (expr -> LBRK elements RBRK .)
    RBRK            reduce using rule 21 (expr -> LBRK elements RBRK .)
    COM             reduce using rule 21 (expr -> LBRK elements RBRK .)


state 45

    (22) elements -> elements COM . expr
    (1) expr -> . expr CAT expr
    (2) expr -> . expr ADD expr
    (3) expr -> . expr SUB expr
    (4) expr -> . expr MUL expr
    (5) expr -> . expr DIV expr
    (6) expr -> . expr MOD expr
    (7) expr -> . expr FDIV expr
    (8) expr -> . expr LOG expr
    (9) expr -> . expr EXP expr
    (10) expr -> . expr DIE expr
    (11) expr -> . MACRO REP expr
    (12) expr -> . SUM expr
    (13) expr -> . AVG expr
    (14) expr -> . SAMM expr
    (15) expr -> . expr LOW expr
    (16) expr -> . expr HIGH expr
    (17) expr -> . LPAR expr RPAR
    (18) expr -> . NUMBER
    (19) expr -> . var
    (21) expr -> . LBRK elements RBRK
    (20) var -> . LAST

    MACRO           shift and go to state 2
    SUM             shift and go to state 3
    AVG             shift and go to state 4
    SAMM            shift and go to state 5
    LPAR            shift and go to state 6
    NUMBER          shift and go to state 7
    LBRK            shift and go to state 9
    LAST            shift and go to state 10

    expr                           shift and go to state 46
    var                            shift and go to state 8

state 46

    (22) elements -> elements COM expr .
    (1) expr -> expr . CAT expr
    (2) expr -> expr . ADD expr
    (3) expr -> expr . SUB expr
    (4) expr -> expr . MUL expr
    (5) expr -> expr . DIV expr
    (6) expr -> expr . MOD expr
    (7) expr -> expr . FDIV expr
    (8) expr -> expr . LOG expr
    (9) expr -> expr . EXP expr
    (10) expr -> expr . DIE expr
    (15) expr -> expr . LOW expr
    (16) expr -> expr . HIGH expr

    RBRK            reduce using rule 22 (elements -> elements COM expr .)
    COM             reduce using rule 22 (elements -> elements COM expr .)
    CAT             shift and go to state 11
    ADD             shift and go to state 12
    SUB             shift and go to state 13
    MUL             shift and go to state 14
    DIV             shift and go to state 15
    MOD             shift and go to state 16
    FDIV            shift and go to state 17
    LOG             shift and go to state 18
    EXP             shift and go to state 19
    DIE             shift and go to state 20
    LOW             shift and go to state 21
    HIGH            shift and go to state 22

